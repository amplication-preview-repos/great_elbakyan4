/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IndustryPartnershipService } from "../industryPartnership.service";
import { IndustryPartnershipCreateInput } from "./IndustryPartnershipCreateInput";
import { IndustryPartnership } from "./IndustryPartnership";
import { IndustryPartnershipFindManyArgs } from "./IndustryPartnershipFindManyArgs";
import { IndustryPartnershipWhereUniqueInput } from "./IndustryPartnershipWhereUniqueInput";
import { IndustryPartnershipUpdateInput } from "./IndustryPartnershipUpdateInput";

export class IndustryPartnershipControllerBase {
  constructor(protected readonly service: IndustryPartnershipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IndustryPartnership })
  async createIndustryPartnership(
    @common.Body() data: IndustryPartnershipCreateInput
  ): Promise<IndustryPartnership> {
    return await this.service.createIndustryPartnership({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IndustryPartnership] })
  @ApiNestedQuery(IndustryPartnershipFindManyArgs)
  async industryPartnerships(
    @common.Req() request: Request
  ): Promise<IndustryPartnership[]> {
    const args = plainToClass(IndustryPartnershipFindManyArgs, request.query);
    return this.service.industryPartnerships({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IndustryPartnership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async industryPartnership(
    @common.Param() params: IndustryPartnershipWhereUniqueInput
  ): Promise<IndustryPartnership | null> {
    const result = await this.service.industryPartnership({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IndustryPartnership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIndustryPartnership(
    @common.Param() params: IndustryPartnershipWhereUniqueInput,
    @common.Body() data: IndustryPartnershipUpdateInput
  ): Promise<IndustryPartnership | null> {
    try {
      return await this.service.updateIndustryPartnership({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IndustryPartnership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIndustryPartnership(
    @common.Param() params: IndustryPartnershipWhereUniqueInput
  ): Promise<IndustryPartnership | null> {
    try {
      return await this.service.deleteIndustryPartnership({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
