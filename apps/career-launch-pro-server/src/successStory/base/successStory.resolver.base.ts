/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SuccessStory } from "./SuccessStory";
import { SuccessStoryCountArgs } from "./SuccessStoryCountArgs";
import { SuccessStoryFindManyArgs } from "./SuccessStoryFindManyArgs";
import { SuccessStoryFindUniqueArgs } from "./SuccessStoryFindUniqueArgs";
import { DeleteSuccessStoryArgs } from "./DeleteSuccessStoryArgs";
import { SuccessStoryService } from "../successStory.service";
@graphql.Resolver(() => SuccessStory)
export class SuccessStoryResolverBase {
  constructor(protected readonly service: SuccessStoryService) {}

  async _successStoriesMeta(
    @graphql.Args() args: SuccessStoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SuccessStory])
  async successStories(
    @graphql.Args() args: SuccessStoryFindManyArgs
  ): Promise<SuccessStory[]> {
    return this.service.successStories(args);
  }

  @graphql.Query(() => SuccessStory, { nullable: true })
  async successStory(
    @graphql.Args() args: SuccessStoryFindUniqueArgs
  ): Promise<SuccessStory | null> {
    const result = await this.service.successStory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SuccessStory)
  async deleteSuccessStory(
    @graphql.Args() args: DeleteSuccessStoryArgs
  ): Promise<SuccessStory | null> {
    try {
      return await this.service.deleteSuccessStory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
