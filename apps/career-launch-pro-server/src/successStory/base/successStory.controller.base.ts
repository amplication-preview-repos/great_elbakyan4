/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SuccessStoryService } from "../successStory.service";
import { SuccessStoryCreateInput } from "./SuccessStoryCreateInput";
import { SuccessStory } from "./SuccessStory";
import { SuccessStoryFindManyArgs } from "./SuccessStoryFindManyArgs";
import { SuccessStoryWhereUniqueInput } from "./SuccessStoryWhereUniqueInput";
import { SuccessStoryUpdateInput } from "./SuccessStoryUpdateInput";

export class SuccessStoryControllerBase {
  constructor(protected readonly service: SuccessStoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SuccessStory })
  async createSuccessStory(
    @common.Body() data: SuccessStoryCreateInput
  ): Promise<SuccessStory> {
    return await this.service.createSuccessStory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SuccessStory] })
  @ApiNestedQuery(SuccessStoryFindManyArgs)
  async successStories(
    @common.Req() request: Request
  ): Promise<SuccessStory[]> {
    const args = plainToClass(SuccessStoryFindManyArgs, request.query);
    return this.service.successStories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SuccessStory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async successStory(
    @common.Param() params: SuccessStoryWhereUniqueInput
  ): Promise<SuccessStory | null> {
    const result = await this.service.successStory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SuccessStory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSuccessStory(
    @common.Param() params: SuccessStoryWhereUniqueInput,
    @common.Body() data: SuccessStoryUpdateInput
  ): Promise<SuccessStory | null> {
    try {
      return await this.service.updateSuccessStory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SuccessStory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSuccessStory(
    @common.Param() params: SuccessStoryWhereUniqueInput
  ): Promise<SuccessStory | null> {
    try {
      return await this.service.deleteSuccessStory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
