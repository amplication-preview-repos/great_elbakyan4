/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApplicationStep as PrismaApplicationStep,
} from "@prisma/client";

export class ApplicationStepServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationStepCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationStep.count(args);
  }

  async applicationSteps(
    args: Prisma.ApplicationStepFindManyArgs
  ): Promise<PrismaApplicationStep[]> {
    return this.prisma.applicationStep.findMany(args);
  }
  async applicationStep(
    args: Prisma.ApplicationStepFindUniqueArgs
  ): Promise<PrismaApplicationStep | null> {
    return this.prisma.applicationStep.findUnique(args);
  }
  async createApplicationStep(
    args: Prisma.ApplicationStepCreateArgs
  ): Promise<PrismaApplicationStep> {
    return this.prisma.applicationStep.create(args);
  }
  async updateApplicationStep(
    args: Prisma.ApplicationStepUpdateArgs
  ): Promise<PrismaApplicationStep> {
    return this.prisma.applicationStep.update(args);
  }
  async deleteApplicationStep(
    args: Prisma.ApplicationStepDeleteArgs
  ): Promise<PrismaApplicationStep> {
    return this.prisma.applicationStep.delete(args);
  }
}
