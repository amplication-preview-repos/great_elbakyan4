/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicationStep } from "./ApplicationStep";
import { ApplicationStepCountArgs } from "./ApplicationStepCountArgs";
import { ApplicationStepFindManyArgs } from "./ApplicationStepFindManyArgs";
import { ApplicationStepFindUniqueArgs } from "./ApplicationStepFindUniqueArgs";
import { DeleteApplicationStepArgs } from "./DeleteApplicationStepArgs";
import { ApplicationStepService } from "../applicationStep.service";
@graphql.Resolver(() => ApplicationStep)
export class ApplicationStepResolverBase {
  constructor(protected readonly service: ApplicationStepService) {}

  async _applicationStepsMeta(
    @graphql.Args() args: ApplicationStepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicationStep])
  async applicationSteps(
    @graphql.Args() args: ApplicationStepFindManyArgs
  ): Promise<ApplicationStep[]> {
    return this.service.applicationSteps(args);
  }

  @graphql.Query(() => ApplicationStep, { nullable: true })
  async applicationStep(
    @graphql.Args() args: ApplicationStepFindUniqueArgs
  ): Promise<ApplicationStep | null> {
    const result = await this.service.applicationStep(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicationStep)
  async deleteApplicationStep(
    @graphql.Args() args: DeleteApplicationStepArgs
  ): Promise<ApplicationStep | null> {
    try {
      return await this.service.deleteApplicationStep(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
